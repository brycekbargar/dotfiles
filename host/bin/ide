#!/usr/bin/env bash

if [[ $1 == *"-h"* ]]; then
	cat <<HELP
Manages Dev Containers

USAGE:
	ide build [--cache]			Docker build a new testing dev container
	ide promote					Promote testing -> stable -> oldstable
	ide up [environment]		Start a dev container
	ide down [environment]		Stop a running dev container
	ide --help

ARGS:
	--cache			Build the container using the buildkit cache.
	environment		oldstable/stable/dev, defaults to stable.

OPTIONS:
	-h, --help		Prints help information.
HELP

	exit 0
fi

function container_name {
	echo "$1-dev-container"
}

function image_name {
	echo "brycekbargar.com/dev-container:$1"
}

function find_image {
	docker image ls --format "{{ .ID }}" "$(image_name "$1")"
}

function build {
	local d t_image d_image
	d="$(date '+%m-%d-%y')"
	t_image="$(image_name 'testing')"
	d_image="$(image_name "$d")"

	local cache_arg="--no-cache"
	if [[ $1 == "--cache" ]]; then
		cache_arg=""
	fi

	echo "Building $t_image, $d_image with '$cache_arg'"
	docker build ${cache_arg:+"$cache_arg"} \
		-t "$t_image" -t "$d_image" \
		--build-arg="USER=katherine.bargar" \
		--build-arg="HOSTOS=darwin" \
		-f "$HOME/_setup/dotfiles/Dockerfile" \
		"$HOME/_setup"
}

function promote {
	if [[ -z "$(find_image "testing")" ]]; then
		echo >&2 "No testing container to promote"
		exit 1
	fi

	down "oldstable"
	down "stable"
	down "testing"

	local os_image s_image t_image
	os_image="$(image_name "oldstable")"
	s_image="$(image_name "stable")"
	t_image="$(image_name "testing")"

	if [[ -z "$(find_image "stable")" ]]; then
		echo "stable -> oldstable"
		docker tag "$s_image" "$os_image"
	fi

	echo "testing -> stable"
	docker tag "$t_image" "$s_image"

	echo "removing testing"
	docker rmi "$t_image"
}

function up {
	# Creating them is idempotent as long as it uses the same driver
	echo "creating runtime volumes"
	docker volume create code
	docker volume create pixi-envs
	docker volume create pixi-pkgs
	echo "created runtime volumes"

	local container state
	container="$(container_name "$1")"
	state="$(docker ps --all --filter "name=$container" --format "{{ .State }}")"
	echo "ensuring connection to $container, currently ${state-:null}"

	if [[ $state == "running" ]]; then
		docker exec -it "$container" /usr/bin/zsh -i

	elif [[ $state == "stopped" || $state == "exited" ]]; then
		docker start -ai "$container"

	elif [[ -z $state ]]; then
		docker run -it --user 1111 \
			-p 4123:4123 -p 14123:14123 -p 24123:24123 \
			--mount type=volume,src=pixi-envs,target=/opt/pixi/envs \
			--mount type=volume,src=pixi-pkgs,target=/opt/pixi/pkgs \
			--mount type=volume,src=code,target=/home/katherine.bargar/code \
			-v /var/run/docker.sock:/var/run/docker.sock \
			--name "$container" \
			"$(image_name "$1")"

	else
		echo >&2 "$container was in a weird state"
		exit 1
	fi

}

function down {
	local container state
	container="$(container_name "$1")"
	state="$(docker ps --all --filter "name=$container" --format "{{ .State }}")"
	echo "removing $container in current state $state"
	if [[ -n $state ]]; then
		docker rm -v -f "$container"
	fi
}

case "$1" in
build) build "$2" ;;
promote) promote ;;
up) up "${2:-stable}" ;;
down) down "${2:-stable}" ;;

*)
	echo "$1 not understood, use --help"
	exit 1
	;;
esac
