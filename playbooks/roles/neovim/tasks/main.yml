---
- name: Getting existing conda envs
  ansible.builtin.command: conda env list --json
  register: pre_env_list
  changed_when: false

- name: Set nvim_env_path fact
  ansible.builtin.set_fact:
    pre_nvim_env_path: "{{ item }}"
  with_items: "{{ pre_env_list.stdout | from_json |  community.general.json_query('envs') }}"
  when: item.endswith('nvim')

- name: Clearing previous conda env
  ansible.builtin.command:
    cmd: "conda env remove --name nvim --quiet --yes"
    removes: "{{ pre_nvim_env_path }}"

- name: Clearing previous nvim install
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ lookup('env', 'XDG_DATA_HOME') }}/nvim"
    - "{{ lookup('env', 'XDG_STATE_HOME') }}/nvim"
    - "{{ lookup('env', 'XDG_CONFIG_HOME') }}/nvim"

- name: Creating conda env
  ansible.builtin.command:
    cmd: "conda env create --file '{{ dotfiles }}/dot_config/nvim/environment.yml' --quiet"
    creates: "{{ pre_nvim_env_path }}"

- name: Getting conda envs
  ansible.builtin.command:
    cmd: "conda env list --json"
  register: env_list
  changed_when: true

- name: Set nvim_env_path fact
  ansible.builtin.set_fact:
    nvim_env_path: "{{ item }}"
  with_items: "{{ env_list.stdout | from_json |  community.general.json_query('envs') }}"
  when: item.endswith('nvim')

- name: Downloading Neovim (for wsl)
  ansible.builtin.get_url:
    url: https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
    dest: "{{ nvim_env_path }}"
    mode: "0755"
  when: ansible_distribution == "Debian"

- name: Extracting Neovim (for wsl)
  ansible.builtin.command:
    cmd: "{{ nvim_env_path }}/nvim.appimage --appimage-extract"
    creates: "{{ nvim_env_path }}/squashfs-root"
  when: ansible_distribution == "Debian"
  args:
    chdir: "{{ nvim_env_path }}"

- name: Making Neovim directory (for macos)
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/squashfs-root/usr"
    state: directory
    mode: "0755"
  when: ansible_distribution == "MacOSX" and ansible_architecture != "arm64"

- name: Downloading Neovim (for macos)
  ansible.builtin.unarchive:
    remote_src: true
    src: https://github.com/neovim/neovim/releases/download/nightly/nvim-macos.tar.gz
    dest: "{{ nvim_env_path }}/squashfs-root/usr"
  when: ansible_distribution == "MacOSX" and ansible_architecture != "arm64"

- name: Linking nvim binary
  ansible.builtin.file:
    src: "{{ nvim_env_path }}/squashfs-root/usr/bin/nvim"
    dest: "{{ lookup('env', 'XDG_BIN_HOME') }}/nvim"
    state: link
  when: ansible_distribution == "Debian" or ansible_distribution == "MacOSX" and ansible_architecture != "arm64"

# TODO: CHeck for M1 binary releases
- name: Installing Neovim (for macos m1)
  community.general.homebrew:
    name: neovim
    state: head
  when: ansible_distribution == "MacOSX" and ansible_architecture == "arm64"

- name: Setting conda env variables
  ansible.builtin.command:
    cmd: "conda env config vars set --name nvim GOBIN='{{ nvim_env_path }}/bin' CARGO_INSTALL_ROOT='{{ nvim_env_path }}'"
  changed_when: false

- name: Installing stylua
  ansible.builtin.command:
    cmd: conda run --name nvim --no-capture-output cargo install stylua
    creates: "{{ nvim_env_path }}/bin/stylua"

- name: Finding latest lua lsp
  ansible.builtin.uri:
    url: https://api.github.com/repos/sumneko/lua-language-server/releases/latest
    return_content: true
  register: lua_lsp

- name: Making lua lsp directory
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/lua-language-server"
    state: directory
    mode: "0755"

- name: Installing latest lua lsp
  loop: "{{ lua_lsp.json.assets }}"
  when: >
    (ansible_distribution == "Debian" and "linux-x64.tar.gz" in item.name)
    or (ansible_distribution == "MacOSX" and "darwin-" ~ ansible_architecture|replace("x86_", "") ~ ".tar.gz" in item.name)
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ item.browser_download_url }}"
    dest: "{{ nvim_env_path }}/lua-language-server"

- name: Creating lua lsp shim
  ansible.builtin.copy:
    dest: "{{ nvim_env_path }}/bin/lua-language-server"
    content: |
      #/usr/bin/env bash
      {{ nvim_env_path }}/lua-language-server/bin/lua-language-server $@
    mode: "0755"
    force: true

- name: Linking configuration
  ansible.builtin.file:
    src: "{{ dotfiles }}/dot_config/nvim"
    dest: "{{ lookup('env', 'XDG_CONFIG_HOME') }}/nvim"
    state: link
