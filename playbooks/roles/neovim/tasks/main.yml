---
- name: Creating conda env
  ansible.builtin.command:
    cmd: conda env create --file '{{ dotfiles }}/XDG_CONFIG_HOME/nvim/environment.yml' --quiet
    creates: "{{ nvim_env_path }}"
  register: nvim_conda_create

- name: Updating conda env definition
  ansible.builtin.command:
    cmd: conda env update --file '{{ dotfiles }}/XDG_CONFIG_HOME/nvim/environment.yml' --quiet --prune
  when: not nvim_conda_create.changed

- name: Updating conda env
  ansible.builtin.command:
    cmd: conda update --name nvim --all --yes
  register: nvim_conda_update
  changed_when: "'packages will be' in nvim_conda_update.stdout"
  when: not nvim_conda_create.changed

- name: Removing Neovim directory
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/squashfs-root"
    state: absent

- name: Downloading Neovim (for wsl)
  ansible.builtin.get_url:
    url: https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
    dest: "{{ nvim_env_path }}"
    mode: "0755"
  when: ansible_distribution == "Debian"

- name: Extracting Neovim (for wsl)
  ansible.builtin.command:
    cmd: "{{ nvim_env_path }}/nvim.appimage --appimage-extract"
    creates: "{{ nvim_env_path }}/squashfs-root"
  when: ansible_distribution == "Debian"
  args:
    chdir: "{{ nvim_env_path }}"

- name: Removing Neovim AppImage (for wsl)
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/nvim.appimage"
    state: absent
  when: ansible_distribution == "Debian"

- name: Making Neovim directory (for macos)
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/squashfs-root/usr"
    state: directory
    mode: "0755"
  when: ansible_distribution == "MacOSX"

- name: Downloading Neovim (for macos)
  ansible.builtin.unarchive:
    remote_src: true
    src: https://github.com/neovim/neovim/releases/download/nightly/nvim-macos.tar.gz
    dest: "{{ nvim_env_path }}/squashfs-root/usr"
    extra_opts:
      - --strip-components=1
  when: ansible_distribution == "MacOSX"

- name: Linking nvim binary
  ansible.builtin.file:
    src: "{{ nvim_env_path }}/squashfs-root/usr/bin/nvim"
    dest: "{{ lookup('env', 'XDG_BIN_HOME') }}/nvim"
    state: link

- name: Update nvim npm
  ignore_errors: true
  ansible.builtin.command:
    cmd: conda run --name nvim npm install -g npm@latest
  register: nvim_npm_update
  changed_when: "'changed 16 packages' not in nvim_npm_update.stdout"

- name: Installing tools
  condstall:
    package: "{{ item.pkg }}"
    binary: "{{ item.exe | default('') }}"
    installer: "{{ item.with }}"
    target: nvim
    state: present
  with_items:
    - pkg: stylua
      with: rust
    - pkg: taplo-cli --features lsp
      exe: taplo
      with: rust
    - pkg: mvdan.cc/sh/v3/cmd/shfmt@latest
      exe: shfmt
      with: go
    - pkg: github.com/hashicorp/terraform-ls@latest
      exe: terraform-ls
      with: go
    - pkg: github.com/terraform-linters/tflint@latest
      exe: tflint
      with: go

- name: Finding latest lua lsp
  ansible.builtin.uri:
    url: https://api.github.com/repos/sumneko/lua-language-server/releases/latest
    return_content: true
  register: lua_lsp

- name: Removing lua lsp directory
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/lua-language-server"
    state: absent

- name: Creating lua lsp directory
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/lua-language-server"
    state: directory
    mode: "0755"

- name: Installing latest lua lsp
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ item.browser_download_url }}"
    dest: "{{ nvim_env_path }}/lua-language-server"
  loop: "{{ lua_lsp.json.assets }}"
  when: item.name.endswith(lua_lsp_pattern)

- name: Verifying latest lua lsp
  ansible.builtin.stat:
    path: "{{ nvim_env_path }}/lua-language-server/bin/lua-language-server"
  register: lua_lsp_exe

- name: Latest lua lsp failed
  ansible.builtin.fail:
    msg: Lua LSP not available and executable, expected to download {{ lua_lsp_pattern }} but got {{ lua_lsp_exe.stat }}
  when: not lua_lsp_exe.stat.exists or not lua_lsp_exe.stat.executable

- name: Creating lua lsp shim
  ansible.builtin.template:
    dest: "{{ nvim_env_path }}/bin/lua-language-server"
    src: lua-language-server
    mode: "0755"

- name: Add packer plugin
  ansible.builtin.git:
    repo: https://github.com/wbthomason/packer.nvim
    version: HEAD
    force: true
    dest: "{{ lookup('env', 'XDG_DATA_HOME') }}/nvim/site/pack/packer/start/packer.nvim"
    single_branch: true
    depth: 1

- name: Link common plugins
  ansible.builtin.file:
    src: "{{ lookup('env', 'HOME') }}/.vim/pack/common"
    dest: "{{ lookup('env', 'XDG_DATA_HOME') }}/nvim/site/pack/common"
    state: link

- name: PackerSync
  ansible.builtin.command:
    cmd: |
      nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  changed_when: true
  when: nvim_conda_create.changed
