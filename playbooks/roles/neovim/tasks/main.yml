---
# TODO: Make a default or var?
- name: Set facts
  ansible.builtin.set_fact:
    nvim_env_path: "{{ lookup('env', 'CONDA_ENVS') }}/nvim"
    nvim_plugin_root: "{{ lookup('env', 'XDG_DATA_HOME') }}/nvim/site/pack"

- name: Clearing previous conda env
  ansible.builtin.command:
    cmd: "conda env remove --name nvim --quiet --yes"
    removes: "{{ nvim_env_path }}"

- name: Clearing previous nvim install
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ lookup('env', 'XDG_DATA_HOME') }}/nvim"
    - "{{ lookup('env', 'XDG_STATE_HOME') }}/nvim"
    - "{{ lookup('env', 'XDG_CONFIG_HOME') }}/nvim/plugin"

- name: Creating conda env
  ansible.builtin.command:
    cmd: "conda env create --file '{{ dotfiles }}/XDG_CONFIG_HOME/nvim/environment.yml' --experimental-solver libmamba --quiet"
    creates: "{{ nvim_env_path }}"

- name: Downloading Neovim (for wsl)
  ansible.builtin.get_url:
    url: https://github.com/neovim/neovim/releases/download/nightly/nvim.appimage
    dest: "{{ nvim_env_path }}"
    mode: "0755"
  when: ansible_distribution == "Debian"

- name: Extracting Neovim (for wsl)
  ansible.builtin.command:
    cmd: "{{ nvim_env_path }}/nvim.appimage --appimage-extract"
    creates: "{{ nvim_env_path }}/squashfs-root"
  when: ansible_distribution == "Debian"
  args:
    chdir: "{{ nvim_env_path }}"

- name: Making Neovim directory (for macos)
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/squashfs-root/usr"
    state: directory
    mode: "0755"
  when: ansible_distribution == "MacOSX"

- name: Downloading Neovim (for macos)
  ansible.builtin.unarchive:
    remote_src: true
    src: https://github.com/neovim/neovim/releases/download/nightly/nvim-macos-universal.tar.gz
    dest: "{{ nvim_env_path }}/squashfs-root/usr"
  when: ansible_distribution == "MacOSX"

- name: Linking nvim binary
  ansible.builtin.file:
    src: "{{ nvim_env_path }}/squashfs-root/usr/bin/nvim"
    dest: "{{ lookup('env', 'XDG_BIN_HOME') }}/nvim"
    state: link

- name: Update nvim npm
  ansible.builtin.command:
    cmd: "conda run --name nvim npm install -g npm@latest"
  changed_when: true

- name: Installing cargo deps
  ansible.builtin.shell:
    cmd: |
      condstall --name nvim --with rust --yes -- {{ item.pkg }} --locked
    creates: "{{ nvim_env_path }}/bin/{{ item.exe }}"
  with_items:
    - pkg: "stylua"
      exe: "stylua"
    - pkg: "taplo-cli --features lsp"
      exe: "taplo"

- name: Finding latest lua lsp
  ansible.builtin.uri:
    url: https://api.github.com/repos/sumneko/lua-language-server/releases/latest
    return_content: true
  register: lua_lsp

- name: Making lua lsp directory
  ansible.builtin.file:
    path: "{{ nvim_env_path }}/lua-language-server"
    state: directory
    mode: "0755"

- name: Installing latest lua lsp
  loop: "{{ lua_lsp.json.assets }}"
  when: >
    (ansible_distribution == "Debian" and "linux-x64.tar.gz" in item.name)
    or (ansible_distribution == "MacOSX" and "darwin-" ~ ansible_architecture|replace("x86_", "") ~ ".tar.gz" in item.name)
  ansible.builtin.unarchive:
    remote_src: true
    src: "{{ item.browser_download_url }}"
    dest: "{{ nvim_env_path }}/lua-language-server"

- name: Creating lua lsp shim
  ansible.builtin.copy:
    dest: "{{ nvim_env_path }}/bin/lua-language-server"
    content: |
      #/usr/bin/env bash
      {{ nvim_env_path }}/lua-language-server/bin/lua-language-server $@
    mode: "0755"
    force: true

- name: Add packer plugin
  ansible.builtin.git:
    repo: "https://github.com/wbthomason/packer.nvim"
    version: "HEAD"
    force: true
    dest: "{{ nvim_plugin_root }}/packer/start/packer.nvim"
    single_branch: true
    depth: 1

- name: Link common plugins
  ansible.builtin.file:
    src: "{{ lookup('env', 'HOME') }}/.vim/pack/common"
    dest: "{{ nvim_plugin_root }}/common"
    state: link

- name: PackerSync
  ansible.builtin.command:
    cmd: |
      nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  changed_when: true
