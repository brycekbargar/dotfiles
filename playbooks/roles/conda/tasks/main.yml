---
- name: Make condarc from template
  ansible.builtin.copy:
    src: "{{ dotfiles }}/XDG_CONFIG_HOME/conda/template"
    dest: "{{ lookup('env', 'CONDARC') }}"
    mode: "0644"

- name: Ensure channels
  ansible.builtin.blockinfile:
    path: "{{ lookup('env', 'CONDARC') }}"
    marker: "# {mark} ANSIBLE MANAGED CHANNELS"
    state: present
    insertafter: "channels:"
    block: |
      - conda-forge
      # TODO: Make this a var

- name: Update conda
  ansible.builtin.command:
    cmd: conda update --name base conda --all --yes
  environment:
    CONDA_CHANNEL_PRIORITY: flexible
  register: conda_base_update
  changed_when: "'packages will be' in conda_base_update.stdout"

- name: Install mamba
  ansible.builtin.command:
    cmd: conda install --name base conda-libmamba-solver micromamba --yes
    creates: "{{ lookup('env', 'CONDA_BASE') }}/bin/micromamba"
  environment:
    CONDA_CHANNEL_PRIORITY: flexible

- name: Linking umamba binary
  ansible.builtin.file:
    src: "{{ lookup('env', 'CONDA_BASE') }}/bin/micromamba"
    dest: "{{ lookup('env', 'XDG_BIN_HOME') }}/umamba"
    state: link

- name: Ensure libmamba
  ansible.builtin.lineinfile:
    path: "{{ lookup('env', 'CONDARC') }}"
    line: "experimental_solver: libmamba"
    state: present

- name: Install conda-lock
  ansible.builtin.command:
    cmd: conda install --name base conda-lock --yes
    creates: "{{ lookup('env', 'CONDA_BASE') }}/bin/conda-lock"
  environment:
    CONDA_CHANNEL_PRIORITY: flexible

- name: Create system environments
  ansible.builtin.command:
    cmd: conda env create --file {{ item }}
    creates: "{{ lookup('env', 'CONDA_SYSTEM') }}/{{ item | basename | splitext | first }}"
  environment:
    CONDA_ENVS_PATH: "{{ lookup('env', 'CONDA_SYSTEM') }}"
  with_fileglob:
    - "{{ lookup('env', 'XDG_CONFIG_HOME') }}/conda/*.yml"

- name: Link toolchain bins
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ lookup('env', 'XDG_PKG_HOME') }}/{{ item.toolchain }}"
    force: true
    state: link
  with_items:
    - src: "{{ lookup('env', 'CARGO_HOME') }}/bin"
      toolchain: rust
    - src: "{{ lookup('env', 'GOPATH') }}/bin"
      toolchain: go

- name: Update base npm
  ansible.builtin.command:
    cmd: conda run --name runtimes-nodejs npm install -g npm@latest
  changed_when: true

- name: Clean conda
  ignore_errors: true
  ansible.builtin.command:
    cmd: conda clean --packages --yes
  register: conda_clean
  changed_when: "'There are no unused package(s) to remove.' not in conda_clean.stdout"
